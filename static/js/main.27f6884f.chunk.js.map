{"version":3,"sources":["components/PageHome/index.jsx","components/Page404/index.jsx","constants/report.js","components/ReportObstruction/Upload.jsx","utils/report.js","components/ReportObstruction/Location.jsx","components/ReportObstruction/Details.jsx","components/ReportObstruction/index.jsx","App.js","serviceWorker.js","index.js"],"names":["PageHome","react_default","a","createElement","Link","to","Page404","coordsOakland","lat","lng","Upload","_ref","setUpload","setStatus","onDrop","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","files","wrap","_context","prev","next","console","log","stop","this","_x","apply","arguments","es","_ref3","getRootProps","getInputProps","isDragActive","assign","className","concat","Location","initCenter","initZoom","setLocation","_useState","useState","_useState2","slicedToArray","height","setHeight","useEffect","handleResize","window","innerHeight","addEventListener","setTimeout","removeEventListener","_useState3","_useState4","center","setCenter","_useState5","_useState6","zoom","setZoom","options","length","undefined","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","error","getUserLocation","then","_location$coords","coords","latitude","longitude","catch","warn","Fragment","Map","onDrag","event","target","getCenter","onZoom","getZoom","style","TileLayer","attribution","url","Marker","position","Popup","onClick","Details","upload","name","size","ReportObstruction","status","ReportObstruction_Upload","ReportObstruction_Location","ReportObstruction_Details","App","BrowserRouter","basename","Switch","Route","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","render","src_App","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27f6884f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom'\n\nconst PageHome = () => (\n  <div>\n    <h1>Home Page</h1>\n    <ul>\n      <li><Link to=\"/report\">Report Obstruction</Link></li>\n      <li><Link to=\"/nopers\">Bad Link</Link></li>\n    </ul>\n  </div>\n);\n\nexport default PageHome;\n","import React from \"react\";\n\nconst Page404 = () => (\n  <div>\n    <p>gosh darn we got us a 404 page not heckin found</p>\n  </div>\n);\n\nexport default Page404;\n","export const UPLOAD = \"UPLOAD\";\nexport const LOCATION = \"LOCATION\";\nexport const DETAILS = \"DETAILS\";\nexport const SUBMISSION = \"SUBMISSION\";\nexport const COMPLETE = \"COMPLETE\";\n\nexport const USE_MY_LOCATION = \"USE_MY_LOCATION\";\nexport const DROP_PIN_ON_MAP = \"DROP_PIN_ON_MAP\";\nexport const ENTER_ADDRESS = \"ENTER_ADDRESS\";\n\nexport const coordsOakland = {\n  lat: 37.8131418,\n  lng: -122.2662702\n};\n\nexport const initDetails = {\n  name: '',\n  contact: '',\n  notes: '',\n};\n","import React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { LOCATION } from \"../../constants/report\";\n\n// import { fakeImageUpload } from \"../../utils/report\";\n\nconst Upload = ({ setUpload, setStatus }) => {\n  const onDrop = async (files) => {\n    console.log(\"uploading:\", files[0]);\n    setUpload(files[0]);\n    setStatus(LOCATION);\n  }\n\n  return (\n    <Dropzone onDrop={onDrop}>\n      {({getRootProps, getInputProps, isDragActive}) => {\n        return (\n          <div\n            {...getRootProps()}\n            className={`dropzone ${isDragActive ? 'dropzone--isActive' : ''}`}\n          >\n            <input {...getInputProps()} />\n            {\n              isDragActive ?\n                <p>Drop files here...</p> :\n                <p>Try dropping some files here, or click to select files to upload.</p>\n            }\n          </div>\n        )\n      }}\n    </Dropzone>  \n  );\n};\n\nexport default Upload;\n","\nexport const getUserLocation = (options = {}) => new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(\n    location => resolve(location),\n    error => reject(error),\n    options,\n  );\n});\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport const fakeImageUpload = file => new Promise((resolve, reject) => {\n  setTimeout(() => resolve({ url: `${uuidv4()}.png` }), 1000);\n});\n","import React, { useState, useEffect } from \"react\";\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\nimport { DETAILS } from \"../../constants/report\";\nimport { getUserLocation } from \"../../utils/report\";\n\nconst Location = ({initCenter, initZoom, setLocation, setStatus}) => {\n  const [height, setHeight] = useState(400);\n  useEffect(() => {\n    const handleResize = () => {\n      setHeight(window.innerHeight - 60);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setTimeout(handleResize, 0);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []);\n\n  const [center, setCenter] = useState(initCenter);\n  const [zoom, setZoom] = useState(initZoom);\n  const onDrag = (event) => setCenter(event.target.getCenter());\n  const onZoom = (event) => setZoom(event.target.getZoom());\n  useEffect(() => {\n    getUserLocation()\n      .then(location => {\n        const { latitude: lat, longitude: lng } = location.coords;\n        setCenter({ lat, lng });\n      })\n      .catch(() => {\n        console.warn(\"Could not get user location\");\n      });\n  }, []);\n\n  const saveLocation = () => {\n    setLocation(center);\n    setStatus(DETAILS);\n  };\n\n  return (\n    <>\n      <Map\n        center={center}\n        zoom={zoom}\n        onDrag={onDrag}\n        onZoom={onZoom}\n        style={{ height: height }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={center}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      </Map>\n      <button onClick={saveLocation}>Save Location</button>\n    </>\n  );\n};\n\nexport default Location;\n","import React from \"react\";\n\n// import { SUBMISSION } from \"../../constants/report\";\n\nconst Details = ({upload, location}) => {\n  return (\n    <>\n      <p>upload: {upload.name} ({upload.size} bytes)</p>\n      <p>location: [{location.lat}, {location.lng}]</p>\n      <p>details...</p>\n    </>\n  );\n};\n\nexport default Details;\n","import React, { useState } from \"react\";\n\nimport {\n  UPLOAD,\n  LOCATION,\n  DETAILS,\n  SUBMISSION,\n  COMPLETE,\n  coordsOakland,\n  // initDetails,\n} from \"../../constants/report\";\n\nimport Upload from \"./Upload\";\nimport Location from \"./Location\";\nimport Details from \"./Details\";\n\nconst ReportObstruction = () => {\n  const [status, setStatus] = useState(UPLOAD);\n  const [upload, setUpload] = useState({});\n  const [location, setLocation] = useState(coordsOakland);\n  // const [details, setDetails] = useState(initDetails);\n  // const updateDetail = ([key, val]) => setDetails({ ...details, [key]: val });\n\n  // const handleSubmit = () => {\n  //   console.log(\"submit!\")\n  // }\n\n  switch(status) {\n    case UPLOAD:\n      return (\n        <Upload\n          setStatus={setStatus}\n          setUpload={setUpload}\n        />\n      );\n    case LOCATION:\n      return (\n        <Location\n          initCenter={coordsOakland}\n          initZoom={14}\n          setLocation={setLocation}\n          setStatus={setStatus}\n        />\n      );\n    case DETAILS:\n      return (\n        <Details\n          upload={upload}\n          location={location}\n        />\n      );\n    case SUBMISSION:\n      return (<p>...</p>);\n    case COMPLETE:\n      return (<p>...</p>);\n    default:\n      return null;    \n  }\n};\n\nexport default ReportObstruction;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// import { Provider } from \"react-redux\";\n\n// import store from \"./redux\";\nimport PageHome from \"./components/PageHome\";\nimport Page404 from './components/Page404';\n// import ReportObstruction3 from \"./components/ReportObstruction3\";\nimport ReportObstruction from \"./components/ReportObstruction\";\n\nconst App = () => {\n  const basename = process.env.NODE_ENV === 'production' ? '/oak-bike-client' : null;\n  return (\n    <Router basename={basename}>\n      <Switch>\n        <Route exact path=\"/\" component={PageHome} />\n        <Route path=\"/report\" component={ReportObstruction} />\n        <Route path=\"/*\" component={Page404} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}