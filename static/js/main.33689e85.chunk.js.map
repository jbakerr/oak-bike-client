{"version":3,"sources":["constants/actionsNames.js","redux/report/reducers.js","constants/report.js","redux/report/actions.js","redux/report/sagas.js","redux/index.js","components/PageHome/index.jsx","components/Page404/index.jsx","components/ReportObstruction/image.jsx","redux/report/selectors.js","components/ReportObstruction/index.jsx","App.js","serviceWorker.js","index.js"],"names":["GET_LOCATION_COORDS","initialState","status","image","location","shared","fetching","coords","lat","lng","method","details","name","phone","email","notes","time","state","arguments","length","undefined","action","type","payload","Object","objectSpread","defineProperty","key","value","reportReducer","setReportLocationShared","setReportLocationFetching","setReportLocationCoords","getLocationCoords","reportSagas","getUserLocation","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","position","regenerator_default","a","wrap","_context","prev","next","put","call","sent","latitude","longitude","t0","console","log","concat","message","stop","_marked","this","_context2","takeLatest","_marked2","sagaMiddleWare","createSagaMiddleware","reducers","combineReducers","report","store","createStore","applyMiddleware","run","PageHome","react_default","createElement","Link","to","Page404","ReportImage","connect","dispatch","setImage","setReportImage","props","dist_es","onDrop","files","_ref","getRootProps","getInputProps","isDragActive","assign","className","reportState","selectReportStatus","createSelector","ReportObstruction","ReportObstruction_image","App","es","BrowserRouter","basename","Switch","Route","exact","path","component","Boolean","window","hostname","match","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAQaA,EAAsB,sBCM7BC,EAAe,CACnBC,OCfmB,QDgBnBC,MAAO,KACPC,SAAU,CACRC,QAAQ,EACRC,UAAU,EACVC,OAAQ,CACNC,IAAK,KACLC,IAAK,MAEPC,OAAQ,MAEVC,QAAS,CACPC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,KAAM,OAQJd,EAAS,WAAyC,IAAxCe,EAAwCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhCjB,EAAaC,OAAQmB,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQC,EAAOC,MACb,IDzC6B,oBC0C3B,OAAOD,EAAOE,QAChB,QACE,OAAON,IAIPd,EAAQ,WAAwC,IAAvCc,EAAuCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA/BjB,EAAaE,MAAOkB,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IDjD4B,mBCkD1B,OAAOD,EAAOE,QAChB,QACE,OAAON,IAIPb,EAAW,WAA2C,IAA1Ca,EAA0CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCjB,EAAaG,SAAUiB,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1D,OAAOC,EAAOC,MACZ,IDzDsC,6BC0DpC,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADL,CAEEb,SAAUiB,EAAOE,UAErB,ID7DwC,+BC8DtC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADL,CAEEX,SAAUe,EAAOE,UAErB,IDjEsC,6BCkEpC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADL,CAEEV,OAAQc,EAAOE,UAEnB,IDrEsC,6BCsEpC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADL,CAEEP,OAAQW,EAAOE,UAEnB,QACE,OAAON,IAIPN,EAAU,WAA0C,IAAzCM,EAAyCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCjB,EAAaU,QAASU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAAOC,EAAOC,MACZ,IDhF6B,oBCiF3B,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACFP,EADLO,OAAAE,EAAA,EAAAF,CAAA,GAEGH,EAAOE,QAAQI,IAAMN,EAAOE,QAAQK,QAEzC,QACE,OAAOX,IAaEY,EATO,WAAkC,IAAjCZ,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBjB,EAAcoB,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,MAAO,CACLlB,OAAQA,EAAOe,EAAMf,OAAQmB,GAC7BlB,MAAOA,EAAMc,EAAMd,MAAOkB,GAC1BjB,SAAUA,EAASa,EAAMb,SAAUiB,GACnCV,QAASA,EAAQM,EAAMN,QAASU,8BEhFvBS,EAA0B,SAACzB,GAAD,MAAa,CAClDiB,KHpBwC,6BGqBxCC,QAASlB,IAGE0B,EAA4B,SAACzB,GAAD,MAAe,CACtDgB,KHxB0C,+BGyB1CC,QAASjB,IAGE0B,EAA0B,SAACzB,GAAD,MAAa,CAClDe,KH5BwC,6BG6BxCC,QAAShB,eCfD0B,cAeAC,GAvBJC,EAAkB,eAACC,EAADlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAW,GAAX,OAAkB,IAAImB,QAAQ,SAACC,EAASC,GAC9DC,UAAUC,YAAYC,mBACpB,SAAAtC,GAAQ,OAAIkC,EAAQlC,IACpB,SAAAuC,GAAK,OAAIJ,EAAOI,IAChBP,MAIJ,SAAUH,IAAV,IAAAW,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACE,OADFF,EAAAE,KAAA,EACQC,YAAIpB,GAA0B,IADtC,OAGqB,OAHrBiB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG2BE,YAAKjB,GAHhC,OAII,OADMS,EAHVI,EAAAK,KAAAL,EAAAE,KAAA,EAIUC,YAAInB,EAAwB,CAChCxB,IAAKoC,EAASrC,OAAO+C,SACrB7C,IAAKmC,EAASrC,OAAOgD,aAN3B,OAQI,OARJP,EAAAE,KAAA,GAQUC,YAAIrB,GAAwB,IARtC,QAAAkB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAUIS,QAAQC,IAAR,UAAAC,OAAsBX,EAAAQ,GAAMI,UAVhC,QAYE,OAZFZ,EAAAE,KAAA,GAYQC,YAAIpB,GAA0B,IAZtC,yBAAAiB,EAAAa,SAAAC,EAAAC,KAAA,UAeA,SAAU7B,IAAV,OAAAW,EAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OACE,OADFc,EAAAd,KAAA,EACQe,YAAWjE,EAAqBiC,GADxC,wBAAA+B,EAAAH,SAAAK,EAAAH,MAIe7B,QC/BTiC,EAAiBC,cAEjBC,EAAWC,YAAgB,CAC/BC,OAAQ1C,IAGJ2C,EAAQC,YACZJ,EACAK,YAAgBP,IAGlBA,EAAeQ,IAAIzC,GAEJsC,gBCNAI,EAVE,kBACfC,EAAA/B,EAAAgC,cAAA,WACED,EAAA/B,EAAAgC,cAAA,uBACAD,EAAA/B,EAAAgC,cAAA,UACED,EAAA/B,EAAAgC,cAAA,UAAID,EAAA/B,EAAAgC,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,uBACJH,EAAA/B,EAAAgC,cAAA,UAAID,EAAA/B,EAAAgC,cAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,gBCAKC,EANC,kBACdJ,EAAA/B,EAAAgC,cAAA,WACED,EAAA/B,EAAAgC,cAAA,sECqCWI,EAFKC,YAAQ,KAjCD,SAACC,GAAD,MAAe,CACxCC,SAAU,SAAClF,GAAD,OAAWiF,ELSO,SAACjF,GAAD,MAAY,CACxCmB,KHhB8B,mBGiB9BC,QAASpB,GKXqBmF,CAAenF,OAgC3BgF,CA7BE,SAACI,GACAA,EAAbF,SAOR,OACER,EAAA/B,EAAAgC,cAACU,EAAA,EAAD,CAAUC,OANG,SAACC,GACd,IAAMvF,EAAQuF,EAAM,GACpBjC,QAAQC,IAAI,SAAUvD,KAKnB,SAAAwF,GAAiD,IAA/CC,EAA+CD,EAA/CC,aAAcC,EAAiCF,EAAjCE,cAAeC,EAAkBH,EAAlBG,aAC9B,OACEjB,EAAA/B,EAAAgC,cAAA,MAAAtD,OAAAuE,OAAA,GACMH,IADN,CAEEI,UAAS,YAAArC,OAAcmC,EAAe,qBAAuB,MAE7DjB,EAAA/B,EAAAgC,cAAA,QAAWe,KAETC,EACEjB,EAAA/B,EAAAgC,cAAA,+BACAD,EAAA/B,EAAAgC,cAAA,2FC5BHmB,EAAc,SAAAhF,GAAK,OAAIA,EAAMsD,QAAU,IAEvC2B,EAAqBC,YAChCF,EACA,SAAA1B,GAAM,OAAIA,EAAOrE,SCsCJkG,GDnCkBD,YAC/BF,EACA,SAAA1B,GAAM,OAAIA,EAAOpE,QAGuBgG,YACxCF,EACA,SAAA1B,GAAM,OAAIA,EAAOnE,SAASC,SAGgB8F,YAC1CF,EACA,SAAA1B,GAAM,OAAIA,EAAOnE,SAASE,WAGc6F,YACxCF,EACA,SAAA1B,GAAM,OAAIA,EAAOnE,SAASG,SAGc4F,YACxCF,EACA,SAAA1B,GAAM,OAAIA,EAAOnE,SAASM,SAGOyF,YACjCF,EACA,SAAA1B,GAAM,OAAIA,EAAO5D,UCMOwE,YAxBF,SAAClE,GAAD,MAAY,CAClCf,OAAQgG,EAAmBjF,KAuBsB,KAAzBkE,CAbE,SAACI,GAK3B,OAFIA,EADFrF,QAIA,IRnCiB,QQoCf,OAAO2E,EAAA/B,EAAAgC,cAACuB,EAAD,MACT,QACE,OAAOxB,EAAA/B,EAAAgC,cAAA,oBCbEwB,EAhBH,WAGV,OACEzB,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAU/B,MAAOA,GACfK,EAAA/B,EAAAgC,cAAC0B,EAAA,EAAD,CAAQC,SAJ6C,oBAKnD5B,EAAA/B,EAAAgC,cAAC4B,EAAA,EAAD,KACE7B,EAAA/B,EAAAgC,cAAC6B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjCC,EAAA/B,EAAAgC,cAAC6B,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWV,IACjCvB,EAAA/B,EAAAgC,cAAC6B,EAAA,EAAD,CAAOE,KAAK,KAAKC,UAAW7B,QCNlB8B,QACW,cAA7BC,OAAO5G,SAAS6G,UAEe,UAA7BD,OAAO5G,SAAS6G,UAEhBD,OAAO5G,SAAS6G,SAASC,MACvB,2DCZNC,iBACEtC,EAAA/B,EAAAgC,cAACsC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmB9E,WACrBA,UAAU+E,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33689e85.chunk.js","sourcesContent":["export const SET_REPORT_STATUS = \"SET_REPORT_STATUS\";\nexport const SET_REPORT_IMAGE = \"SET_REPORT_IMAGE\";\nexport const SET_REPORT_LOCATION_SHARED = \"SET_REPORT_LOCATION_SHARED\";\nexport const SET_REPORT_LOCATION_FETCHING = \"SET_REPORT_LOCATION_FETCHING\";\nexport const SET_REPORT_LOCATION_COORDS = \"SET_REPORT_LOCATION_COORDS\";\nexport const SET_REPORT_LOCATION_METHOD = \"SET_REPORT_LOCATION_METHOD\";\nexport const SET_REPORT_DETAIL = \"SET_REPORT_DETAIL\";\n\nexport const GET_LOCATION_COORDS = \"GET_LOCATION_COORDS\";\n","import {\n  IMAGE,\n} from \"../../constants/report\"\n\nimport {\n  SET_REPORT_STATUS,\n  SET_REPORT_IMAGE,\n  SET_REPORT_LOCATION_SHARED,\n  SET_REPORT_LOCATION_FETCHING,\n  SET_REPORT_LOCATION_COORDS,\n  SET_REPORT_LOCATION_METHOD,\n  SET_REPORT_DETAIL,\n} from \"../../constants/actionsNames\";\n\nconst initialState = {\n  status: IMAGE,\n  image: null,\n  location: {\n    shared: false,\n    fetching: false,\n    coords: {\n      lat: null,\n      lng: null,\n    },\n    method: null,\n  },\n  details: {\n    name: '',\n    phone: '',\n    email: '',\n    notes: '',\n    time: null,\n  },\n  // submission: {\n  //   status: null,\n  //   error: null,\n  // },\n};\n\nconst status = (state = initialState.status, action) => {\n  switch (action.type) {\n    case SET_REPORT_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nconst image = (state = initialState.image, action) => {\n  switch (action.type) {\n    case SET_REPORT_IMAGE:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nconst location = (state = initialState.location, action) => {\n  switch(action.type) {\n    case SET_REPORT_LOCATION_SHARED:\n      return {\n        ...state,\n        location: action.payload,\n      };\n    case SET_REPORT_LOCATION_FETCHING:\n      return {\n        ...state,\n        fetching: action.payload,\n      };\n    case SET_REPORT_LOCATION_COORDS:\n      return {\n        ...state,\n        coords: action.payload,\n      };\n    case SET_REPORT_LOCATION_METHOD:\n      return {\n        ...state,\n        method: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nconst details = (state = initialState.details, action) => {\n  switch(action.type) {\n    case SET_REPORT_DETAIL:\n      return {\n        ...state,\n        [action.payload.key]: action.payload.value,\n      };\n    default:\n      return state;\n  }\n}\n\nconst reportReducer = (state = initialState, action) => {\n  return {\n    status: status(state.status, action),\n    image: image(state.image, action),\n    location: location(state.location, action),\n    details: details(state.details, action),\n  }\n};\n\nexport default reportReducer;\n","export const IMAGE = \"IMAGE\";\nexport const LOCATION = \"LOCATION\";\nexport const DETAILS = \"DETAILS\";\nexport const SUBMISSION = \"SUBMISSION\";\n\nexport const MY_LOCATION = \"MY_LOCATION\";\nexport const DROP_PIN = \"DROP_PIN\";\nexport const ENTER_ADDRESS = \"ENTER_ADDRESS\";\n\n","import {\n  SET_REPORT_STATUS,\n  SET_REPORT_IMAGE,\n  SET_REPORT_LOCATION_SHARED,\n  SET_REPORT_LOCATION_FETCHING,\n  SET_REPORT_LOCATION_COORDS,\n  SET_REPORT_LOCATION_METHOD,\n  SET_REPORT_DETAIL,\n  GET_LOCATION_COORDS,\n} from \"../../constants/actionsNames\";\n\nexport const setReportStatus = (status) => ({\n  type: SET_REPORT_STATUS,\n  payload: status,\n});\n\nexport const setReportImage = (image) => ({\n  type: SET_REPORT_IMAGE,\n  payload: image,\n});\n\nexport const setReportLocationShared = (shared) => ({\n  type: SET_REPORT_LOCATION_SHARED,\n  payload: shared,\n});\n\nexport const setReportLocationFetching = (fetching) => ({\n  type: SET_REPORT_LOCATION_FETCHING,\n  payload: fetching,\n});\n\nexport const setReportLocationCoords = (coords) => ({\n  type: SET_REPORT_LOCATION_COORDS,\n  payload: coords,\n});\n\nexport const setReportLocationMethod = (method) => ({\n  type: SET_REPORT_LOCATION_METHOD,\n  payload: method,\n});\n\nexport const setReportDetail = (key, value) => ({\n  type: SET_REPORT_DETAIL,\n  payload: {\n    key,\n    value,\n  },\n});\n\nexport const getReportLocationCoords = () => (\n  {\n    type: GET_LOCATION_COORDS,\n  }\n);\n","import { put, call, takeLatest } from \"redux-saga/effects\";\n\nimport { GET_LOCATION_COORDS } from \"../../constants/actionsNames\";\n\nimport {\n  setReportLocationShared,\n  setReportLocationFetching,\n  setReportLocationCoords,\n} from \"./actions\";\n\nconst getUserLocation = (options = {}) => new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(\n    location => resolve(location),\n    error => reject(error),\n    options,\n  );\n});\n\nfunction* getLocationCoords() {\n  yield put(setReportLocationFetching(true));\n  try {\n    const position = yield call(getUserLocation);\n    yield put(setReportLocationCoords({\n      lat: position.coords.latitude,\n      lng: position.coords.longitude,\n    }));\n    yield put(setReportLocationShared(true));\n  } catch (error) {\n    console.log(`ERROR: ${error.message}`)\n  }\n  yield put(setReportLocationFetching(false));\n}\n\nfunction* reportSagas() {\n  yield takeLatest(GET_LOCATION_COORDS, getLocationCoords);\n}\n\nexport default reportSagas;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reportReducer from \"./report/reducers\";\nimport reportSagas from \"./report/sagas\";\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst reducers = combineReducers({\n  report: reportReducer,\n});\n\nconst store = createStore(\n  reducers,\n  applyMiddleware(sagaMiddleWare),\n);\n\nsagaMiddleWare.run(reportSagas);\n\nexport default store;\n","import React from \"react\";\nimport { Link } from 'react-router-dom'\n\nconst PageHome = () => (\n  <div>\n    <h1>Home Page</h1>\n    <ul>\n      <li><Link to=\"/report\">Report Obstruction</Link></li>\n      <li><Link to=\"/nopers\">Bad Link</Link></li>\n    </ul>\n  </div>\n);\n\nexport default PageHome;\n","import React from \"react\";\n\nconst Page404 = () => (\n  <div>\n    <p>gosh darn we got us a 404 page not heckin found</p>\n  </div>\n);\n\nexport default Page404;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Dropzone from \"react-dropzone\";\n\nimport { setReportImage } from \"../../redux/report/actions\";\n\nconst mapDispatchToProps = (dispatch) => ({\n  setImage: (image) => dispatch(setReportImage(image)),\n});\n\nconst ReportImageUI = (props) => {\n  const { setImage } = props;\n\n  const onDrop = (files) => {\n    const image = files[0];\n    console.log(\"image:\", image);\n  }\n\n  return (\n    <Dropzone onDrop={onDrop}>\n      {({getRootProps, getInputProps, isDragActive}) => {\n        return (\n          <div\n            {...getRootProps()}\n            className={`dropzone ${isDragActive ? 'dropzone--isActive' : ''}`}\n          >\n            <input {...getInputProps()} />\n            {\n              isDragActive ?\n                <p>Drop files here...</p> :\n                <p>Try dropping some files here, or click to select files to upload.</p>\n            }\n          </div>\n        )\n      }}\n    </Dropzone>\n  );\n};\n\nconst ReportImage = connect(null, mapDispatchToProps)(ReportImageUI);\n\nexport default ReportImage;\n","import { createSelector } from \"reselect\";\n\nexport const reportState = state => state.report || {};\n\nexport const selectReportStatus = createSelector(\n  reportState,\n  report => report.status,\n);\n\nexport const selectReportImage = createSelector(\n  reportState,\n  report => report.image,\n);\n\nexport const selectReportLocationShared = createSelector(\n  reportState,\n  report => report.location.shared,\n);\n\nexport const selectReportLocationFetching = createSelector(\n  reportState,\n  report => report.location.fetching,\n);\n\nexport const selectReportLocationCoords = createSelector(\n  reportState,\n  report => report.location.coords,\n);\n\nexport const selectReportLocationMethod = createSelector(\n  reportState,\n  report => report.location.method,\n);\n\nexport const selectReportDetails = createSelector(\n  reportState,\n  report => report.details,\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  IMAGE,\n} from \"../../constants/report\"\nimport ReportImage from \"./image\";\n\nimport {\n  selectReportStatus,\n  // selectReportLocationFetching,\n  // selectReportLocationCoords,\n} from \"../../redux/report/selectors\";\n\n// import {\n//   setReportStatus,\n//   getReportLocationCoords,\n// } from \"../../redux/report/actions\";\n\nconst mapStateToProps = (state) => ({\n  status: selectReportStatus(state),\n  // coords: selectReportLocationCoords(state),\n  // fetching: selectReportLocationFetching(state),\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   setStatus: (status) => dispatch(setReportStatus(status)),\n//   getCoords: () => dispatch(getReportLocationCoords()),\n// });\n\nconst ReportObstructionUI = (props) => {\n  const {\n    status,\n  } = props;\n\n  switch (status) {\n    case IMAGE:\n      return <ReportImage/>;\n    default:\n      return <p>wat</p>;\n  }\n};\n\nconst ReportObstruction = connect(mapStateToProps, null)(ReportObstructionUI);\n\nexport default ReportObstruction;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux\";\nimport PageHome from \"./components/PageHome\";\nimport Page404 from './components/Page404';\nimport ReportObstruction from \"./components/ReportObstruction\";\n\nconst App = () => {\n  const basename = process.env.NODE_ENV === 'production' ? '/oak-bike-client' : null;\n  // process.env.NODE_ENV !== 'production'\n  return (\n    <Provider store={store}>\n      <Router basename={basename}>\n        <Switch>\n          <Route exact path=\"/\" component={PageHome} />\n          <Route path=\"/report\" component={ReportObstruction} />\n          <Route path=\"/*\" component={Page404} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}